name: Build Webserver
on:
  push:
    branches: [main]
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
      - run: make configure
      - run: make build
      - uses: actions/upload-artifact@v4
        id: build-artifact
        with: 
          name: webserver
          path: |
            build/cmd
            build/css
            build/fonts
            build/icons
            build/js
            build/sql
          compression: 6
          overwrite: true
      - run: docker build -t portfoliowebserver .
      - run: docker save -o docker.tar portfoliowebserver:latest
      - uses: actions/upload-artifact@v4
        id: docker-artifact
        with:
          name: docker
          path: docker.tar
          compression: 6
          overwrite: true
  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PackerProductVersion: "latest"
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PackerProductVersion }}
      - uses: actions/download-artifact@v5
        with:
          name: docker
          path: ./
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSACCESSKEYID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSECRETACCESSKEY }}
          AWS_DEFAULT_REGION: us-west-1
        run: |
          aws s3api get-object --bucket ${{ secrets.DUMPBUCKET }} --key ${{ secrets.DUMPKEY }} dump.sql
      - run: |
          cd packer
          packer init .
          export AWS_ACCESS_KEY_ID=${{ secrets.AWSACCESSKEYID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWSSECRETACCESSKEY }}
          packer build -var ami-name=${{ vars.AMINAME }} \
            -var DBName=${{ secrets.DBNAME }} \
            -var DBPass=${{ secrets.DBPASS }} \
            -var DBUser=${{ secrets.DBUSER }} \
            -var DBRootPass=${{ secrets.DBROOTPASS }} \
            -var DumpPath=/tmp/dump.sql \
            -var WebServerDockerPath=/tmp/docker.tar \
            -var AWSAccountID=${{ secrets.AWSACCOUNTID }} .
      - run: |
          cd terraform
          export AWS_ACCESS_KEY_ID=${{ secrets.AWSACCESSKEYID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWSSECRETACCESSKEY }}
          terraform init \
            -backend-config="bucket=${{ secrets.BACKENDBUCKET }}" \
            -backend-config="key=${{ secrets.BACKENDKEY }}" \
            -backend-config="region=us-west-1"
          export AWS_ACCESS_KEY_ID=${{ secrets.AWSACCESSKEYID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWSSECRETACCESSKEY }}
          terraform plan
          terraform apply -auto-approve \
            -var ami-name=${{ vars.AMINAME }} \
            -var domain=${{ vars.DOMAIN }} \
            -var external-zone-id=${{ secrets.HOSTEDZONEID }} \
            -var alternate-domains=${{ vars.ALTDOMAINS }} \

